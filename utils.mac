safeop (expr) := if atom(expr) then [] else op(expr)$

/* iota, starting at 1 (since that's the base of list indexes */
iota (n) := makelist(i,i,1,n)$

pairs (lst) := makelist([lst[n], lst[n+1]], n, 1, length(lst)-1)$

_last_position (lst, p) := block([],
  for i: length(lst) step -1 thru 1
  do (if (is(p(lst[i]))) then return(i)))$

last_position (lst, p) := block([i: _last_position(lst,p)],
  if is(numberp(i)) then i else -1);

head (lst, n) := makelist(lst[i], i, 1, min(n, length(lst)))$
/* Remaining list after the first n elements */
tail (lst, n) := makelist(lst[i], i, min(n, length(lst))+1, length(lst))$

ncr2(n,c) := mod(binomial(n,c), 2)$

/*
  Return a list of pairs [x,n] where n is the index in the list.
*/
tag_list (lst) := zip (lst, iota(length(lst)))$

zip (lst1, lst2) := map(lambda([x,n], [x,n]), lst1, lst2)$

/*
  A "histogram" function. Takes a list eg [1,1,2] and returns a set of
  the form {[1,2], [2,1]}, meaning "1 occurs once and 2 occurs twice".

  Yes, this is indeed a slow and silly implementation.
*/
first_equalp(pair1, pair2) := is(first(pair1)=first(pair2))$
hist (lst) :=
  map(lambda([st],
             block([a: listify(st)],
                   [first(first(a)), length(a)])),
      equiv_classes(setify(tag_list(lst)), first_equalp))$


/*
  Count how many permutations there are which don't alter lst.
*/
num_identical_perms (lst) := block(
  [h: listify(hist(lst))],
  product(h[i][2], i, 1, length(h)))$
