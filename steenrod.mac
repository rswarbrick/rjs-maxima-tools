/*
  The Steenrod algebra for p=2
*/

load("./utils.mac")$

/*
  Sq^i is represented by Sq[i]
*/
Sq[0] : 1$

/*
  adem_analyse analyses an expression containing Sq[i] and tries to
  rewrite it in terms of the Serre-Cartan basis, where monomials
  appear in the form Sq[a1].Sq[a2]. ... .Sq[ak] and a_{i} >=
  2*a_{i+1}.

  It will, at least, ensure that monomials in a product get rewritten
  in terms of the basis. It doesn't try to expand everything out
  completely, since I suspect that's not very helpful.

  Examples:

  adem_analyse (Sq[1].Sq[2]);

  =>     Sq 
           3

  adem_analyse (Sq[1].Sq[2] + Sq[3]);

  =>     0

  (remember we're working mod 2!)
*/
adem_analyse (expr) := block([modulus: 2],
  ratsimp(adem_analyse_worker (expr)))$

/*
  Calculate the degrees in which expr lies in the mod 2 Steenrod
  algebra. Returns the answer as a set.

  Examples:

  steenrod_degrees (Sq[n]);

  =>    {n}

  steenrod_degrees (Sq[n] . (Sq[2] + Sq[3]^^k));

  =>    {n + 2, n + 3 k}

*/
steenrod_degrees (expr) := block([dgs: {}],
  steenrod_degrees_worker (expr, n),
  dgs)$

/*
  List the basis elements of the mod 2 Steenrod algebra over
  F_2. Lists in order of increasing length of product.

  Example:

  steenrod_f2_basis (5)

  =>    [Sq , Sq  . Sq ] 
           5    4     1  
*/
steenrod_f2_basis (degree) := map(adem_resquare_prod,
                                  adem_admissible_seqs (degree));


/****** INTERNAL CODE BELOW HERE ************************************/

/* Code for Adem relations ******************************************/
adem_make_admissible_pair(i,j) :=
  if is(i >= 2*j) then Sq[i].Sq[j] else
  sum(ncr2(j-k-1, i-2*k)*Sq[i+j-k].Sq[k], k, 0, floor(i/2))$

adem_analyse_part(s) := block([],
  if is(safeop(s)=Sq) then [1,first(s)] else [s,0])$

adem_resquare (n) := Sq[n]$
adem_resquare_prod (lst) := lreduce(".", map(adem_resquare, lst), 1)$

adem_analyse_sqp (lst) := block([],
  if is(length(lst) < 2) then adem_resquare_prod (lst)
  else
  block([split: last_position(pairs(lst),
                              lambda([p], is(p[1] < 2*p[2])))],
        if is(-1 = split) then adem_resquare_prod (lst)
        else
        expand(adem_resquare_prod(head(lst,split-1)).
               adem_make_admissible_pair(lst[split], lst[split+1]).
               adem_resquare_prod(tail(lst,split+1)))))$

adem_analyse_product(s) := block(
  [elts: map(adem_analyse_part, args(s))],
  lreduce(".", map(first, elts)) .
  adem_analyse_sqp(map(second,
                   sublist(elts, lambda([pair],
                                        is(second(pair) # 0))))))$

adem_analyse_worker (expr) := block(
  if is(atom(expr) or freeof(Sq, expr)) then expr
  elseif is(op(expr) = ".") then
  block([old: expr, new: adem_analyse_product(expr)],
        if is(old = new) then new else adem_analyse (new))
  elseif is(op(expr) = Sq) then expr
  else map(adem_analyse, expr))$


/* Code for Steenrod degree calculations ****************************/
steenrod_register_degree (n, degexpr) := block(
  dgs: adjoin(subst(n,'n,degexpr), dgs))$

steenrod_degrees_mult (lst) := block([dset: {}],
  for degs in
  apply(cartesian_product,
        map (lambda([s], block([dgs: {}],
                               steenrod_degrees(s))), lst)) do
  dset: adjoin(lreduce("+", degs), dset),
  dset)$

steenrod_degrees_worker (expr, degexpr) := block(
  [cur_reg: lambda([n], steenrod_register_degree(n,degexpr))],
  if is(atom(expr) or freeof(Sq, expr)) then
    cur_reg(0)
  elseif is(op(expr) = Sq) then
    cur_reg(first(expr))
  elseif is(op(expr) = "+" or op(expr) = "-") then
    map(lambda([s], steenrod_degrees_worker(s, degexpr)), args(expr))
  elseif is(op(expr) = "." or op(expr) = "*") then
    map(cur_reg, steenrod_degrees_mult (args(expr)))
  elseif is(op(expr) = "^^") then
    (if not(freeof(Sq, second(expr))) then
      error ("Raising to a power involving a Sq")
    else
      steenrod_degrees_worker (first(expr), degexpr*second(expr)))
  else
    error ("Unknown operator.")
  )$

/* Code for Steenrod basis ******************************************/
adem_admissible_seqs_l (len, total, ub) := block([acc: []],
  if is(total < 2^len - 1) then false
  elseif is(len = 1) then
    (if is(total <= ub) then acc: [[total]])
  else
    map(lambda([x],
               map(lambda([seq], acc: cons(cons(x, seq), acc)),
                   adem_admissible_seqs_l (len-1,
                                           total-x, floor(x/2)))),
        makelist(i,i,2^(len-1),ub)),
  acc)$

adem_admissible_seqs (total) :=
  lreduce(append,
          map (lambda([l], adem_admissible_seqs_l (l, total, total)),
               iota(log(total+1)/log(2))))$

