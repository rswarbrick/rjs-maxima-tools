load("utils.mac")$

/*
  Represent a power series in n variables x1,...,xn as some sort of
  assoc which allows

     I := (i,j,k) |-> coeff of x^i y^j z^k =: A[I]

  The general representation is that such a power series *is* a
  function taking n arguments and returning an expression for the
  coefficient. We also store a non-negative integer K and guarantee
  that, for sum(I) <= K, the function will return the correct
  coefficient. We don't define the results of calling the function for
  a higher degree index. K=-1 means that the power series is defined
  for all degrees.

  The composite of two power series F(G(x1,..,xn)) (only defined if
  the zero-order term in G is zero) is represented by compose(F,G). If
  F had more than one variable, you'd write something like
  compose(F,G1,G2).
*/
defstruct (fps (f, vars, maxdeg))$

load("fps.lisp")$
load("fps-coeff.lisp")$
load("fps-partsum.lisp")$
load("fps-calc.lisp")$
