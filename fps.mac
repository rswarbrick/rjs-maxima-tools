load("utils.mac")$

/*

  Represent a power series in n variables x1,...,xn as some sort of
  assoc which allows

     I := (i,j,k) |-> coeff of x^i y^j z^k =: A[I]

  The general representation is that such a power series *is* a
  function taking n arguments and returning an expression for the
  coefficient. We also store a non-negative integer K and guarantee
  that, for sum(I) <= K, the function will return the correct
  coefficient. We don't define the results of calling the function for
  a higher degree index. K=-1 means that the power series is defined
  for all degrees.
*/
defstruct (fps (f, n, maxdeg))$

fpsp (expr) :=
  is(not(atom(expr)) and op(expr) = 'fps and
  fps_validp(expr))$

fps_validp (f) :=
  is(integerp(f@n) and integerp(f@maxdeg) and
     is(f@n > 0) and is(f@maxdeg >= -1))$

/*
  Generate a formal power series in one variable from a list of
  coefficients.

  Performs a shallow copy of lst.
*/
list_to_fps (lst) :=
  if not(listp(lst) and length(lst)>0) then
  error("lst must be nonempty.")
  else
  block([f: new(fps)],
    f@f: buildq([cpy: copy(lst)], lambda([n], cpy[n+1])),
    f@n: 1,
    f@maxdeg: length(lst)-1,
    f)$

/*
  Make a formal power series from a subscripted variable.
*/
subvar_to_fps (x, nvars, maxpow) :=
  if(not(symbolp(x))) then error("x should be a symbol")
  else
  block([f: new(fps)],
    f@f: buildq([a: makelist(concat('x,i),i,1,nvars), x:x],
                lambda(a, apply(subvar, cons(x, a)))),
    f@n: nvars,
    f@maxdeg: maxpow,
    f)$

/*
  Make a formal power series from a function.
*/
function_to_fps (func, nvars, maxpow) :=
  if(not(symbolp(func) or (not(atom(func)) and op(func) = lambda)))
  then error("x should be a symbol")
  else
  block([f: new(fps)],
    f@f: buildq([a: makelist(concat('x,i),i,1,nvars), func:func],
                lambda(a, apply(func, a))),
    f@n: nvars,
    f@maxdeg: maxpow,
    f)$

/*
  Get the coefficient for the indices list I. If given an integer,
  treats it as a one-element list.
*/
fps_get_coeff (fps, I) := block([J],
  if (integerp(I)) then J: [I] else J: I,
  fps_get_coeff_sanity_check (fps, J),
  apply(fps@f, J))$

fps_get_coeff_sanity_check (fps, I) := block([],
  if (not(fpsp(fps) and listp(I))) then
  error("Needs a list of indices and a FPS"),

  if(not(fps@n = length(I))) then
  error("Wrong number of indices."),

  for i in I do
  if(not(integerp(i) and i>=0)) then
  error("I must be a list of non-neg integers"),

  block([tot: lsum(x,x,I)],
    if (is(fps@maxdeg >= 0 and tot > fps@maxdeg)) then
    error("FPS not defined to that degree.")));

/*
  Generate the partial sum of FPS up to the max degree requested.
*/
fps_term (fps, variables, I) :=
  if(not(length(variables) = length(I))) then
  error("Length of variables # length of indices")
  else
  product(variables[k]^I[k], k, 1, length(I))*
  fps_get_coeff (fps, I)$

fps_partial_sum_posorder (fps, variables, order) :=
  block([parts: integer_partitions(order, length(variables)),
         acc: 0],
    for p in parts do
    for I in permutations(p) do
    acc: acc + num_identical_perms(I)*fps_term(fps, variables, I),
    acc)$

fps_partial_sum_order (fps, variables, order) :=
  if is(order < 0) then 0
  elseif is(order = 0) then
  fps_term(fps, variables, map(lambda([x], 0), variables))
  else
  fps_partial_sum_posorder (fps, variables, order)$

fps_partial_sum (fps, variables, maxorder) := block([acc: 0],
  for n: 0 thru maxorder do
  acc: acc + fps_partial_sum_order(fps,variables,n),
  acc)$
